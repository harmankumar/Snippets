3 different arrays[edit]
Instead of searching for the 3 numbers in a single array, we can search for them in 3 different arrays. I.e., given three arrays X, Y and Z, find three numbers a∈X, b∈Y, c∈Z, such that a+b+c=0. Call the 1-array variant 3SUMx1 and the 3-array variant 3SUMx3.
Given a solver for 3SUMx1, the 3SUMx3 problem can be solved in the following way (assuming all elements are integers):
For every element in X, set: X[i] ← X[i]*10+1.
For every element in Y, set: Y[i] ← Y[i]*10+2.
For every element in Z, set: Z[i] ← Z[i]*10-3.
Let S be a concatenation of the arrays X, Y and Z.
Use the 3SUMx1 oracle to find three elements a'∈S, b'∈S, c'∈S such that a'+b'+c'=0.
Because the LSD (least significant digit) of the sum is 0, the LSDs of a', b' and c' must be 1, 2 and 7 (in any order). Suppose wlog that the LSD of a' is 1, b' is 2 and c' is 7.
Return a ← (a'-1)/10, b ← (b'-2)/10, c ← (c'+3)/10.
By the way we transformed the arrays, it is guaranteed that a∈X, b∈Y, c∈Z.[2]




a+b=c[edit]
Instead of requiring a+b+c=0, we can find numbers that satisfy a+b=c in the following way (assuming all elements are integers):
Create a copy of the original array where each element x becomes 10x+1.
Create a copy of the original array where each x becomes -10x-2.
In the concatenation of these two arrays, find 3 elements whose sum is 0.
Correctness proof:
If in the original array there are elements for which a+b=c, then the algorithm will find (10a+1), (10b+1) and (-10c-2), whose sum is 0.
Conversely, any triple found by the algorithm must have exactly two elements from the first copy (10a+1), (10b+1), and a single element from the second copy (-10c-2), since other combinations cannot have a sum of 0. Hence, any triple found will necessarily match an a+b=c triple in the original array
In a very similar way, a solver for a+b=c can be used to solve a+b+c=0.




Suppose the input array is S[0..n-1]. 3SUM can be solved in O(n^2) time on average by inserting each number S[i] into a hash table, and then for each index i and j, checking whether the hash table contains the integer -(S[i]+S[j]).
Alternatively, the algorithm below first sorts the input array and then tests all possible pairs in a careful order that avoids the need to binary search for the pairs in the sorted list, achieving worst-case O(n^2) time, as follows.[1]
 sort(S);
 for i=0 to n-3 do
    a = S[i];
    start = i+1;
    end = n-1;
    while (start < end) do
       b = S[start];
       c = S[end];
       if (a+b+c == 0) then
          output a, b, c;
          // Continue search for all triplet combinations summing to zero.
           start = start + 1
           end = end - 1
       else if (a+b+c > 0) then
          end = end - 1;
       else
          start = start + 1;
       end
    end
 end
The following example shows this algorithm's execution on a small sorted array. Current values of a are shown in green, values of b and c are shown in red.
 -25 -10 -7 -3 2 4 8 10  (a+b+c==-25)
 -25 -10 -7 -3 2 4 8 10  (a+b+c==-22)
 . . .
 -25 -10 -7 -3 2 4 8 10  (a+b+c==-7)
 -25 -10 -7 -3 2 4 8 10  (a+b+c==-7)
 -25 -10 -7 -3 2 4 8 10  (a+b+c==-3)
 -25 -10 -7 -3 2 4 8 10  (a+b+c==2)
 -25 -10 -7 -3 2 4 8 10  (a+b+c==0)
The correctness of the algorithm can be seen as follows. Suppose we have a solution a + b + c = 0. Since the pointers only move in one direction, we can run the algorithm until the leftmost pointer points to a. Run the algorithm until either one of the remaining pointers points to b or c, whichever occurs first. Then the algorithm will run until the last pointer points to the remaining term, giving the affirmative solution.